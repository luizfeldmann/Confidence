CMAKE_MINIMUM_REQUIRED(VERSION 3.8)
PROJECT(Confidence LANGUAGES CXX VERSION 1.0.0.0)

# Configure project metadata
SET(PROJ_DESCRIPTION "Confidence is a tool to centralize and manage configuration files")
SET(COMPANY_NAME "Luiz Feldmann")
SET(COPYRIGHT_OWNER ${COMPANY_NAME})

# Prebuild resources
include(res/icons/exportIcons.cmake)
SET(RESOURCESFILE "resources.rc")
configure_file(res/resources.in.rc ${RESOURCESFILE})

# Dependency: JInterface
include(dependencies/JInterface/ConsumeMe.txt)

# Dependency: CLI11
include_directories(dependencies/CLI11/include)

# Dependency: wxWidgets
find_package(wxWidgets COMPONENTS core base)

# Project sources
SET(${CMAKE_PROJECT_NAME}_SOURCES
    "src/main.cpp"
    # wxWidgets Autogenerated
    "ui/wxExport/IMainWindow.h"
    "ui/wxExport/IMainWindow.cpp"
    # GUI
    
    "include/ui/CMainApp.h"
    "src/ui/CMainApp.cpp"
    "include/ui/CMainWindow.h"
    "src/ui/CMainWindow.cpp"
    # Utility
    "include/util/CScopedConsoleStyle.h"
    "src/util/CScopedConsoleStyle.cpp"
    "include/util/Log.h"
    "src/util/Log.cpp"
    "include/util/CGuid.h"
    "src/util/CGuid.cpp"
    # Resources
    ${RESOURCESFILE}
    ${ICONS_LIST_EXPORTED}
    # Virtual file system
    "include/vfs/IProjectedFileSystemProvider.h"
    "src/vfs/IProjectedFileSystemProvider.cpp"  )

SET(${CMAKE_PROJECT_NAME}_INCLUDES
    "${CMAKE_CURRENT_LIST_DIR}/include"
    "${CMAKE_CURRENT_LIST_DIR}/ui"
)

# Create and configure target
add_executable(${CMAKE_PROJECT_NAME}
    # Own project
    "${${CMAKE_PROJECT_NAME}_SOURCES}"
    # Dependencies
    "${JINTERFACE_SOURCES_RELATIVE}"
)

target_include_directories(${CMAKE_PROJECT_NAME} PUBLIC
    # Own project
    "${${CMAKE_PROJECT_NAME}_INCLUDES}"
    # Dependencies
    "${JINTERFACE_INCLUDE_RELATIVE}"
    "${wxWidgets_INCLUDE_DIRS}"
)

target_link_libraries(${CMAKE_PROJECT_NAME} ${wxWidgets_LIBRARIES})

if(MSVC)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
endif()

set_target_properties(${CMAKE_PROJECT_NAME}
    PROPERTIES
    CXX_STANDARD 11
    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/bin
    ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/bin
    LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/lib
)

# Create installer
install(TARGETS ${CMAKE_PROJECT_NAME} DESTINATION "bin")

SET(CPACK_GENERATOR "NSIS")
SET(CPACK_PACKAGE_NAME "${CMAKE_PROJECT_NAME}")
SET(CPACK_PACKAGE_VENDOR "${COMPANY_NAME}")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${PROJ_DESCRIPTION}")
SET(CPACK_PACKAGE_VERSION "${CMAKE_PROJECT_VERSION}")
SET(CPACK_PACKAGE_VERSION_MAJOR "${CMAKE_PROJECT_VERSION_MAJOR}")
SET(CPACK_PACKAGE_VERSION_MINOR "${CMAKE_PROJECT_VERSION_MINOR}")
SET(CPACK_PACKAGE_VERSION_PATCH "${CMAKE_PROJECT_VERSION_PATCH}")
SET(CPACK_PACKAGE_VERSION_TWEAK "${CMAKE_PROJECT_VERSION_TWEAK}")
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE.txt")
set(CPACK_NSIS_MUI_ICON "${CMAKE_CURRENT_SOURCE_DIR}/res/icons\\\\SETUP.ico")
SET(CPACK_PACKAGE_INSTALL_DIRECTORY "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}")
SET(CPACK_NSIS_MODIFY_PATH ON) # Add the tool to system PATH
SET(CPACK_PACKAGE_EXECUTABLES "${CMAKE_PROJECT_NAME};${CMAKE_PROJECT_NAME}")
SET(CPACK_CREATE_DESKTOP_LINKS "${CPACK_PACKAGE_EXECUTABLES}")
include(CPack)

add_custom_command(TARGET ${CMAKE_PROJECT_NAME} POST_BUILD
    COMMAND "${CMAKE_CPACK_COMMAND}" "-C" "$<CONFIGURATION>" "--config" "${CPACK_OUTPUT_CONFIG_FILE}"
    COMMENT "Running CPack. Please wait..."
    DEPENDS ${PROJECT_NAME}
)