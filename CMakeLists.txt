CMAKE_MINIMUM_REQUIRED(VERSION 3.8)
PROJECT(Confidence LANGUAGES CXX VERSION 1.0.0.0)

# Configure project metadata
SET(PROJ_DESCRIPTION "Confidence is a tool to centralize and manage configuration files")
SET(COMPANY_NAME "Luiz Feldmann")
SET(COPYRIGHT_OWNER ${COMPANY_NAME})

# Prebuild resources
include(res/icons/exportIcons.cmake)
SET(RESOURCESFILE "resources.rc")
configure_file(res/resources.in.rc ${RESOURCESFILE})

# Configure version file
configure_file(src/util/version.in.cpp "version.cpp")

# Dependency: JInterface
include(dependencies/JInterface/ConsumeMe.cmake)

# Dependency: CLI11
include_directories(dependencies/CLI11/include)

# Dependency: wxWidgets
find_package(wxWidgets COMPONENTS core base aui stc)

# Dependency: CMark
find_package(cmark CONFIG REQUIRED)

# Project sources
SET(${CMAKE_PROJECT_NAME}_SOURCES
    "src/main.cpp"

    # Core
    "include/core/IExecutable.h"
    "include/core/CEvaluationContext.h"
    "src/core/CEvaluationContext.cpp"
    "include/core/CExecutionContextBase.h"
    "src/core/CExecutionContextBase.cpp"
    "include/core/CExecutionContext.h"
    "include/core/IContextStorage.h"
    "src/core/CExecutionContext.cpp" 
    "include/core/INamedItem.h"
    "include/core/CStoredNameItem.h"
    "src/core/CStoredNameItem.cpp"
    "include/core/IDescribedItem.h"
    "include/core/CStoredDescriptionItem.h"
    "src/core/CStoredDescriptionItem.cpp"
    "include/core/ITreeItemCollection.h"
    "include/core/CStoredItemCollection.h"
    "src/core/CStoredItemCollection.cpp"
    "include/core/CNoChildren.h"
    "src/core/CNoChildren.cpp"
    "include/core/ETreeItemType.h"
    "include/core/ISerializationNotify.h"
    "include/core/IProjTreeItem.h"
    "src/core/IProjTreeItem.cpp"
    "include/core/CProject.h"
    "src/core/CProject.cpp"
    "include/core/CGroup.h"
    "src/core/CGroup.cpp"
    "include/core/CVariableExpressionKey.h"
    "src/core/CVariableExpressionKey.cpp"
    "include/core/EBuiltInVariables.h"
    "src/core/EBuiltInVariables.cpp"
    "include/core/CEnvironmentVariable.h"
    "src/core/CEnvironmentVariable.cpp"
    "include/core/CVariable.h"
    "src/core/CVariable.cpp"
    "include/core/CGeneratedTextFile.h"
    "src/core/CGeneratedTextFile.cpp"
    "include/core/IFindByName.h"
    "include/core/CInstance.h"
    "src/core/CInstance.cpp"
    "include/core/CInstanceGroup.h"
    "src/core/CInstanceGroup.cpp"
    "include/core/CConfiguration.h"
    "src/core/CConfiguration.cpp"
    "include/core/CConfigurationGroup.h"
    "src/core/CConfigurationGroup.cpp"
    "include/core/SProcessStartInfo.h"
    "include/core/CRunProcess.h"
    "include/core/IProcessPolicy.h"
    "src/core/IProcessPolicy.cpp"
    "include/core/IExpression.h"
    "include/core/CStoredExpression.h"
    "src/core/CStoredExpression.cpp"
    "include/core/CProcessArgument.h"
    "src/core/CProcessArgument.cpp"
    "include/core/CProcessFireForget.h"
    "src/core/CProcessFireForget.cpp"
    "include/core/CProcessWaitCompletion.h"
    "src/core/CProcessWaitCompletion.cpp"
    "src/core/CRunProcess.cpp"
    "include/core/INotifyItemOperation.h"
    "src/core/INotifyItemOperation.cpp"

    # Documentation exporting
    "include/docs/IDocumentable.h"
    "include/docs/IOutputFileName.h"
    "include/docs/CStoredOutputFileName.h"
    "src/docs/CStoredOutputFileName.cpp"
    "include/docs/EDocExporter.h"
    "include/docs/IDocExporter.h"
    "include/docs/CMarkNodeWrapper.h"
    "src/docs/CMarkNodeWrapper.cpp"
    "include/docs/CMarkCustomBlock.h"
    "src/docs/CMarkCustomBlock.cpp"
    "include/docs/CCommonMarkExporter.h"
    "src/docs/CCommonMarkExporter.cpp"
    "include/docs/CMarkdownExporter.h"
    "src/docs/CMarkdownExporter.cpp"
    "include/docs/CHtmlExporter.h"
    "src/docs/CHtmlExporter.cpp"

    # wxWidgets Autogenerated
    "ui/wxExport/IMainWindow.h"
    "ui/wxExport/IMainWindow.cpp"
    "ui/wxExport/INameDescEditor.h"
    "ui/wxExport/INameDescEditor.cpp"
    "ui/wxExport/IProjectEditor.h"
    "ui/wxExport/IProjectEditor.cpp"
    "ui/wxExport/IGroupEditor.h"
    "ui/wxExport/IGroupEditor.cpp"
    "ui/wxExport/IVariableEditor.h"
    "ui/wxExport/IVariableEditor.cpp"
    "ui/wxExport/ITextFileEditor.h"
    "ui/wxExport/ITextFileEditor.cpp"
    "ui/wxExport/IRunProcessEditor.h"
    "ui/wxExport/IRunProcessEditor.cpp"

    # GUI
    "include/ui/CMainApp.h"
    "src/ui/CMainApp.cpp"
    "include/ui/CMainWindow.h"
    "src/ui/CMainWindow.cpp"
    "include/ui/CAcceleratorEntry.h"
    "src/ui/CAcceleratorEntry.cpp"
    "include/ui/STreeItemTypeInfo.h"
    "src/ui/STreeItemTypeInfo.cpp"
    "include/ui/SDocExporterTypeInfo.h" 
    "src/ui/SDocExporterTypeInfo.cpp" 
    "include/ui/CTreeItemEditorManager.h"
    "src/ui/CTreeItemEditorManager.cpp"
    "include/ui/Editors/ITreeItemEditor.h"
    "src/ui/Editors/ITreeItemEditor.cpp"
    "include/ui/Editors/CNameDescEditor.h"
    "src/ui/Editors/CNameDescEditor.cpp"
    "include/ui/Editors/CProjectEditor.h"
    "src/ui/Editors/CProjectEditor.cpp"
    "include/ui/Editors/CGroupEditor.h"
    "src/ui/Editors/CGroupEditor.cpp"
    "include/ui/Editors/CVariableEditor.h"
    "src/ui/Editors/CVariableEditor.cpp"
    "include/ui/CTextStyler.h" 
    "src/ui/CTextStyler.cpp"
    "include/core/ITextProvider.h"
    "include/core/CStoredTextProvider.h"
    "src/core/CStoredTextProvider.cpp"
    "include/core/CFileTextProvider.h"
    "src/core/CFileTextProvider.cpp"
    "include/ui/Editors/CGeneratedTextFileEditor.h"
    "src/ui/Editors/CGeneratedTextFileEditor.cpp"
    "include/ui/Editors/CProcessEditor.h"
    "src/ui/Editors/CProcessEditor.cpp"
    "include/ui/Models/CBaseModel.h"
    "src/ui/Models/CBaseModel.cpp"
    "include/ui/Models/CBaseTreeItemModel.h"
    "src/ui/Models/CBaseTreeItemModel.cpp"
    "include/ui/Models/CTreeBrowserModel.h"
    "src/ui/Models/CTreeBrowserModel.cpp"
    "include/ui/Models/CProcessArgsModel.h"
    "src/ui/Models/CProcessArgsModel.cpp"
    "include/ui/Models/CVariableTableModel.h"
    "src/ui/Models/CVariableTableModel.cpp"
    "include/ui/Models/CDocExporterTableModel.h"
    "src/ui/Models/CDocExporterTableModel.cpp"

    # Utility
    "include/util/version.h" "version.cpp"
    "include/util/CScopedConsoleStyle.h"
    "src/util/CScopedConsoleStyle.cpp"
    "include/util/Log.h"
    "src/util/Log.cpp"
    "include/util/CGuid.h"
    "src/util/CGuid.cpp"
    "include/util/ITracked.h"
    "include/util/IIdentifiable.h"
    "src/util/IIdentifiable.cpp"
    "include/util/CTempFile.h"
    "src/util/CTempFile.cpp"
    "include/util/StartProcess.h"
    "src/util/StartProcess.cpp"

    # Resources
    ${RESOURCESFILE}
    ${ICONS_LIST_EXPORTED}

    # Virtual file system
    "include/vfs/IFileGenerator.h"
    "include/vfs/CPersistentFileGenerator.h"
    "src/vfs/CPersistentFileGenerator.cpp"
    "include/vfs/CTempSymlinkGenerator.h"
    "src/vfs/CTempSymlinkGenerator.cpp"
    "include/vfs/IProjectedFileSystemProvider.h"
    "src/vfs/IProjectedFileSystemProvider.cpp"  )

SET(${CMAKE_PROJECT_NAME}_INCLUDES
    "${CMAKE_CURRENT_LIST_DIR}/include"
    "${CMAKE_CURRENT_LIST_DIR}/ui"
)

# Create and configure target
add_executable(${CMAKE_PROJECT_NAME}
    # Own project
    "${${CMAKE_PROJECT_NAME}_SOURCES}"
    # Dependencies
    "${JINTERFACE_SOURCES_RELATIVE}"
)

target_include_directories(${CMAKE_PROJECT_NAME} PUBLIC
    # Own project
    "${${CMAKE_PROJECT_NAME}_INCLUDES}"
    # Dependencies
    "${JINTERFACE_INCLUDE_RELATIVE}"
    "${wxWidgets_INCLUDE_DIRS}"
)

target_link_libraries(${CMAKE_PROJECT_NAME} ${wxWidgets_LIBRARIES})
target_link_libraries(${CMAKE_PROJECT_NAME} cmark::cmark)

if(MSVC)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    add_definitions(-D_CRTDBG_MAP_ALLOC)
endif()

set_target_properties(${CMAKE_PROJECT_NAME}
    PROPERTIES
    CXX_STANDARD 17
    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/bin
    ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/bin
    LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/lib
)

# Create installer
install(TARGETS ${CMAKE_PROJECT_NAME} DESTINATION "bin")
x_vcpkg_install_local_dependencies(TARGETS ${CMAKE_PROJECT_NAME} DESTINATION "bin")

SET(CPACK_GENERATOR "NSIS")
SET(CPACK_PACKAGE_NAME "${CMAKE_PROJECT_NAME}")
SET(CPACK_PACKAGE_VENDOR "${COMPANY_NAME}")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${PROJ_DESCRIPTION}")
SET(CPACK_PACKAGE_VERSION "${CMAKE_PROJECT_VERSION}")
SET(CPACK_PACKAGE_VERSION_MAJOR "${CMAKE_PROJECT_VERSION_MAJOR}")
SET(CPACK_PACKAGE_VERSION_MINOR "${CMAKE_PROJECT_VERSION_MINOR}")
SET(CPACK_PACKAGE_VERSION_PATCH "${CMAKE_PROJECT_VERSION_PATCH}")
SET(CPACK_PACKAGE_VERSION_TWEAK "${CMAKE_PROJECT_VERSION_TWEAK}")
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE.txt")
set(CPACK_NSIS_MUI_ICON "${CMAKE_CURRENT_SOURCE_DIR}/res/icons\\\\SETUP.ico")
SET(CPACK_PACKAGE_INSTALL_DIRECTORY "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}")
SET(CPACK_NSIS_MODIFY_PATH ON) # Add the tool to system PATH
SET(CPACK_PACKAGE_EXECUTABLES "${CMAKE_PROJECT_NAME};${CMAKE_PROJECT_NAME}")
SET(CPACK_CREATE_DESKTOP_LINKS "${CPACK_PACKAGE_EXECUTABLES}")
include(CPack)

# Generate installer only if Release
set(IFCPACK "$<CONFIG:Release>")

add_custom_command(TARGET ${CMAKE_PROJECT_NAME} POST_BUILD
    COMMAND "$<${IFCPACK}:${CMAKE_CPACK_COMMAND}>"
            "$<${IFCPACK}:-C $<CONFIGURATION>>" 
            "$<${IFCPACK}:--config ${CPACK_OUTPUT_CONFIG_FILE}>"
    COMMENT "Running CPack. Please wait..."
    DEPENDS ${PROJECT_NAME}
)